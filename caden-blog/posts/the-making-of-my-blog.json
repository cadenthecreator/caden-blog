{"title":"The Making Of My Blog","body":"For a while I have wanted to create a website for myself, and the fact that I don't like giving much information about myself meant I didn't want to create a portfolio.  \nThe natural other option was a blog website. Blogs allow me to talk about cool stuff without having to reveal much of anything about myself.  \nHowever there was one problem in my way, I am not a frontend developer, also I hate javascript. But one language I do like is Rust.  \nSo that mean't finding a way to create a website primarily using Rust. Spoiler alert, you can't really do that easily.  \nSo as a compromise, I decided that I am going to do server-sided rendering. So I needed to find a way to make a backend in Rust for my blog.  \nI don't like to leave all the heavy lifting to a complex and cumbersome framework such as Tauri, or React.  \n\nWith that in mind I settled on a library called [Axum](https://github.com/tokio-rs/axum). It's a light weight webserver framework that is simple, minimal, and most importantly built for Rust.  \nAxum allows me to define routes and just return text, which is perfect for server side rendering.  \nIf I combine it with [Maud](https://maud.lambda.xyz/) I get a fast and convenient way of defining and serving websites to user entirely in Rust.  \nThere was but one problem, refreshing and filtering posts. With server-side rendering there is no way to change the web page without completely reloading it.  \nWhich means that if I tried to refresh the posts I would have to refresh the entire page. On top of that I couldn't do stuff like tag filtering.  \nThis seems pretty grim, however there is a great solution to this, Hypermedia Polyfills. Polyfills are javascript libraries that add, change, or extend the functionality of HTML.  \nAnd Hypermedia is a way to embed a webpage in another webpage.  \nI have picked HTMX for this purpose, it allows me to be able to perform post reloading without having to reload the page.  \nHTMX also allows me to filter by tag with some simple routes on the backend. Yes I know that HTMX is javascript, but importantly its javascript I don't have to write.  \n\nHowever, there was the issue of the actual look of the website, remember when I said I am not a frontend designer? Well this is a great example of that.  \nMe knowing I would really suck at designing a website asked chatGPT to do it for me. I am not a big fan of using LLMs everywhere especially in code.  \nThis is a great example of why. When I was done having chatGPT design a website for me I tried getting used to the design, but it just kinda sucked.  \n  \nThis is a photo of the old website:  \n<img src=\"/assets/old_website.png\" width=\"500px\" alt=\"...\" />\n\nI felt it was very generic, forgettable, and bland, however I'm not a particularly artistically creative person so I spent a while trying out different designs.  \nSo in search of inspiration I looked to the nexus of wacky and weird websites called ~~geo~~ neo-cities.  \nThe simple, square, and colorful nature of those websites gave me the big inspiration for this one and I hope it shows.  \n\n---\n\nOn the more technical side of things, I needed a way to define blog posts, and I didn't feel like setting up a database.  \nSo I opted for simple JSON files that contain essential information, such as the body, title, and description of the post.  \nI could also pull those changes from github which made it really easy to publish changes from my computer.  \n\nBut the final thing I needed was a markup language, the choice seems pretty simple right? Just use HTML it's a perfectly fine markup language.  \nOne issue I __HATE__ HTML as a markup language, it really sucks as just a way to write text, it's __WAY__ over-qualified for it.  \nI would only end up using like 5 tags, and in the end it's syntax is also incredibly cumbersome, making it impractical for writing slightly fancy text.  \nSo as a result I ended up settling with the greatest markup language ever devised: Markdown, specifically Github flavored Markdown (or GFM).  \nJokes aside, GFM is a great candidate, on-top of being very simple it is also very feature-full when it comes to things you can do,  \nsuch as creating tables or code blocks. The fact that I don't really need to worry about the layout of my content that much means I don't need all the crazy tags in HTML.  \n\nOnce I had all 3, a website, a way to store posts, and a way to write posts, I needed one more thing. A way to make the post files;  \nThis brings me to my other program, [blog-creator](https://github.com/cadenthecreator/blog-creator), a simple app to package a blog post file together.  \nThe app is honestly pretty bad, and I would encourage anybody who wants to build off of my work to make their own version.  \nHowever it serves my needs so unless I get annoyed at it I'm probably not going to improve it.\n","image_url":"/assets/old_website_thumbnail.png","summary":"A short telling of the making of my blog","timestamp":"2025-10-16T11:30:00Z","tags":["software"]}